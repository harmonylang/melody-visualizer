{"version":3,"sources":["timeline/AssemblyCard.tsx","timeline/TimelineEditor.tsx","timeline/SharedVariableCard.tsx","timeline/StackTraceTable.tsx","timeline/Timeline.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AssemblyCard","props","state","listRefs","code","reduce","acc","value","set","initialPc","React","createRef","Map","nextProps","_","this","scrollToValue","pcValue","get","current","scrollIntoView","behavior","block","size","title","BugOutlined","className","dataSource","renderItem","item","assembly","map","c","idx","pc","Item","ref","sourceCode","disabled","type","file","substring","lastIndexOf","replace","line","Component","COLOR_MAP","TimelineEditor","interval","processBarsRef","totalDuration","processObjects","processLabels","processBars","blocks","forEach","mas","tid","name","startSliceIdx","lastSliceIdx","has","push","processBar","i","s","slices","start","length","duration","color","processNum","onClickTimeline","bind","playing","oldValue","stepValue","scrollTo","top","left","setStepValue","setState","e","preventDefault","targetElement","currentTarget","rect","getBoundingClientRect","Math","round","clientX","scrollLeft","setInterval","tick","clearInterval","shape","icon","StepBackwardOutlined","onClick","stepBackwards","PauseOutlined","CaretRightOutlined","togglePlaying","StepForwardOutlined","stepForwards","onChange","v","style","flexGrow","max","span","bordered","overflowX","onMouseDown","width","position","padding","height","backgroundColor","SharedVariableCard","sharedValues","treeify","obj","Object","entries","k","formatVariableValue","key","children","sharedVariables","typeofV","startsWith","toString","toUpperCase","JSON","stringify","ProjectOutlined","showIcon","defaultExpandAll","defaultSelectedKeys","switcherIcon","DownOutlined","treeData","StackTraceTable","showStackTraceVariables","level","pid","trace","currentStackTrace","idToStackTrace","callStack","vars","join","processTableData","keys","rowNumber","traceData","process","threadNames","status","fullStatus","stacktrace","stack","method","variables","columns","dataIndex","render","text","PlayCircleTwoTone","twoToneColor","CheckCircleTwoTone","CloseSquareTwoTone","MinusCircleTwoTone","CheckSquareTwoTone","QuestionCircleTwoTone","console","log","WarningTwoTone","statusRender","whiteSpace","pagination","Timeline","currentStep","harmonyData","microSteps","currentSlice","sliceIdx","currentPc","split","minSize","defaultSize","ExclamationCircleOutlined","issue","executedCode","idToThreadName","macroSteps","App","useState","undefined","setHarmonyData","useEffect","handler","event","data","command","jsonData","window","addEventListener","parent","postMessage","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66972106.chunk.js","sourcesContent":["import { BugOutlined } from \"@ant-design/icons\";\nimport { Card, List, Tooltip } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { CharmonyExecutedCode } from \"../types/CharmonyJson\";\nimport './AssemblyCard.css'\n\ninterface AssemblyCardState {\n    listRefs: Map<number, React.RefObject<any>>;\n}\n\ninterface AssemblyCardProps {\n    pcValue: number;\n    code: CharmonyExecutedCode[];\n}\n\nclass AssemblyCard extends React.Component<AssemblyCardProps, AssemblyCardState> {\n    constructor(props: AssemblyCardProps) {\n        super(props);\n\n        this.state = {\n            listRefs: this.props.code.reduce((acc, value) => {\n                acc.set(value.initialPc, React.createRef());\n                return acc;\n            }, new Map())\n        }\n    }\n\n    shouldComponentUpdate(nextProps: AssemblyCardProps, _: any) {\n        this.scrollToValue(nextProps.pcValue);\n        return this.props.code !== nextProps.code;\n    }\n\n    scrollToValue(pcValue: number) {\n        this.state.listRefs.get(pcValue)?.current.scrollIntoView({\n            behavior: 'auto',\n            block: 'start',\n        });\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><BugOutlined /> Assembly</>} className=\"assembly-card\">\n                <List\n                    size=\"small\"\n                    className=\"card-list\"\n                    dataSource={this.props.code}\n                    renderItem={item => <>\n                        {item.assembly.map((c, idx) => {\n                            const pc = idx + item.initialPc;\n                            return <List.Item className=\"assembly-list-item\" key={pc}>\n                                <div ref={this.state.listRefs.get(pc)}>\n                                <Tooltip\n                                    title={item.sourceCode}>\n                                    <Text disabled>{pc}</Text>&nbsp;\n                                    {c.assembly}\n                                    <Text type=\"warning\" className=\"assembly-list-text\">\n                                        {item.file.substring(item.file.lastIndexOf('/') + 1).replace(\".hny\", \"\")}:{item.line}\n                                    </Text>\n                                </Tooltip>\n                                </div>\n                            </List.Item>\n                        })}\n                    </>}\n                />\n            </Card>\n        );\n    }\n}\n\nexport default AssemblyCard;\n","import { CaretRightOutlined, PauseOutlined, StepBackwardOutlined, StepForwardOutlined } from \"@ant-design/icons\";\nimport { Button, Col, List, Row, Slider } from \"antd\";\nimport React from \"react\";\nimport { CharmonyMacroStep, CharmonySlice } from \"../types/CharmonyJson\";\nimport \"./TimelineEditor.css\"\n\nconst BAR_LEN_FACTOR = 5;\nconst COLOR_MAP = ['#c62828', '#AD1457', '#6A1B9A', '#4527A0', '#283593', '#1565C0', '#0277BD', '#00838F',\n    '#00695C', '#2E7D32', '#558B2F', '#9E9D24', '#F9A825', '#FF8F00', '#EF6C00', '#D84315', '#4E342E',\n    '#424242', '#37474F'\n];\n\ninterface TimelineEditorProps {\n    stepValue: number;\n    setStepValue: (v: number) => void;\n    blocks: CharmonyMacroStep[];\n    slices: CharmonySlice[];\n}\n\ninterface TimelineEditorState {\n    playing: boolean;\n    totalDuration: number;\n    processLabels: String[];\n    processBars: ProcessBar[];\n}\n\ninterface ProcessBlock {\n    start: number;\n    length: number;\n    color: string;\n}\n\ninterface ProcessBar {\n    blocks: ProcessBlock[];\n}\n\nclass TimelineEditor extends React.Component<TimelineEditorProps, TimelineEditorState> {\n    interval: NodeJS.Timeout | undefined;\n    processBarsRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: TimelineEditorProps) {\n        super(props);\n\n        let totalDuration = 0;\n        let processObjects = new Map<string, ProcessBar>();\n        let processLabels: String[] = [];\n        let processBars: ProcessBar[] = [];\n\n        props.blocks?.forEach((mas) => {\n            const { tid, name, startSliceIdx, lastSliceIdx } = mas;\n            if (!processObjects.has(tid)) {\n                // Label Generation\n                processLabels.push(name);\n\n                // Row Generation\n                processObjects.set(tid, { blocks: [] });\n            }\n\n            const processBar = processObjects.get(tid);\n\n            for (let i = startSliceIdx; i < lastSliceIdx; i++) {\n                const s = props.slices[i];\n                processBar?.blocks.push({ start: totalDuration, length: s.duration, color: \"\" });\n                totalDuration += s.duration;\n            }\n        });\n\n        let processNum = 0;\n        processObjects.forEach((processBar) => {\n            processBar.blocks.forEach((block) => block.color = COLOR_MAP[processNum % COLOR_MAP.length]);\n            processBars.push(processBar);\n            processNum++;\n        });\n\n        this.processBarsRef = React.createRef();\n        this.onClickTimeline = this.onClickTimeline.bind(this);\n\n        this.state = {\n            playing: false,\n            totalDuration: totalDuration,\n            processLabels: processLabels,\n            processBars: processBars\n        }\n    }\n\n    tick() {\n        let oldValue = this.props.stepValue;\n        if (this.state.playing) {\n            if (oldValue + 1 < this.state.totalDuration) {\n                this.processBarsRef.current?.scrollTo({\n                    top: 0,\n                    left: (oldValue + 1) * BAR_LEN_FACTOR,\n                    behavior: 'auto'\n                });\n                this.setStepValue(oldValue + 1);\n            } else {\n                this.setState({ playing: false });\n            }\n        }\n\n    }\n\n    stepForwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue < this.state.totalDuration)\n            this.setStepValue(oldValue + 1);\n    }\n\n    stepBackwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue > 0)\n            this.setStepValue(oldValue - 1);\n    }\n\n    togglePlaying() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    setStepValue(value: number){\n        this.props.setStepValue(value);\n    }\n\n    onClickTimeline(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        e.preventDefault();\n        let targetElement = (e.currentTarget as HTMLElement)\n        let rect = targetElement.getBoundingClientRect();\n        this.setStepValue(Math.round((e.clientX - rect.left + targetElement.scrollLeft) / BAR_LEN_FACTOR));\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount() {\n        if (this.interval)\n            clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <Col className=\"timeline-card\">\n                <Row className=\"timeline-bar\">\n                    <Button shape=\"circle\"\n                        icon={<StepBackwardOutlined />}\n                        size=\"middle\" className=\"timeline-bar-btn\"\n                        onClick={() => this.stepBackwards()} />\n                    <Button shape=\"circle\"\n                        icon={this.state.playing ? <PauseOutlined /> : <CaretRightOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.togglePlaying()} />\n                    <Button shape=\"circle\"\n                        icon={<StepForwardOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.stepForwards()} />\n                    <Slider onChange={(v) => this.setStepValue(v)} value={this.props.stepValue} style={{ flexGrow: 1 }} max={this.state.totalDuration} className=\"timeline-slider\" />\n                </Row>\n                <Row className=\"timeline-holder\">\n                    <Col span={6}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processLabels}\n                            renderItem={item => (\n                                <List.Item className=\"timeline-process-title\">\n                                    {item}\n                                </List.Item>\n                            )}\n                        />\n                    </Col>\n                    <Col span={18} ref={this.processBarsRef} style={{ overflowX: 'scroll' }} onMouseDown={this.onClickTimeline}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processBars}\n                            style={{ width: this.state.totalDuration * BAR_LEN_FACTOR }}\n                            renderItem={item => (\n                                <List.Item style={{ position: 'relative', padding: 0, height: '3em', }}>\n                                    {item.blocks.map((block) => <div\n                                        style={{\n                                            position: 'absolute',\n                                            left: block.start * BAR_LEN_FACTOR,\n                                            width: block.length * BAR_LEN_FACTOR,\n                                            height: '3em',\n                                            backgroundColor: block.color\n                                        }}>\n                                    </div>)}\n                                </List.Item>\n                            )}\n                        />\n                        <div className=\"timeline-indicator-bar\" style={{ left: this.props.stepValue * BAR_LEN_FACTOR }} />\n                    </Col>\n                </Row>\n            </Col>\n        );\n    }\n}\n\nexport default TimelineEditor;\n","import { DownOutlined, ProjectOutlined } from \"@ant-design/icons\";\nimport { Card, Tree } from \"antd\";\nimport React from \"react\";\n\ninterface SharedVariableCardState {\n    sharedValues: VariableTreeType[];\n}\n\ninterface SharedVariableCardProps {\n    sharedVariables: Record<string, unknown>;\n}\n\nexport type VariableTreeType = {\n    title: string;\n    key: string;\n    children: VariableTreeType[];\n}\n\nclass SharedVariableCard extends React.Component<SharedVariableCardProps, SharedVariableCardState> {\n    constructor(props: SharedVariableCardProps) {\n        super(props);\n\n        let treeify = (obj: any) => Object.entries(obj).map(([k, v]) => {\n            let convertedTree: VariableTreeType;\n            if (v == null || typeof v !== 'object') {\n                convertedTree = {\n                    title: `${k}: ${this.formatVariableValue(v)}`,\n                    key: k,\n                    children: []\n                };\n            } else {\n                convertedTree = {\n                    title: k,\n                    key: k,\n                    children: treeify(v)\n                };\n            }\n            return convertedTree;\n        });\n        this.state = {\n            sharedValues: treeify(this.props.sharedVariables)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><ProjectOutlined /> Variables</>} className=\"variables-card\">\n                <Tree\n                    showIcon\n                    defaultExpandAll\n                    defaultSelectedKeys={['0-0-0']}\n                    switcherIcon={<DownOutlined />}\n                    treeData={this.state.sharedValues}\n                />\n            </Card>\n        );\n    }\n}\n\nexport default SharedVariableCard;\n","import { CheckCircleTwoTone, CheckSquareTwoTone, CloseCircleTwoTone, CloseSquareTwoTone, LoadingOutlined, MinusCircleTwoTone, PlayCircleTwoTone, QuestionCircleTwoTone, WarningTwoTone } from \"@ant-design/icons\";\nimport { Spin, Table, Tooltip } from \"antd\";\nimport React from \"react\";\nimport { CharmonySlice, CharmonyStackTrace } from \"../types/CharmonyJson\";\nimport './StackTraceTable.css'\n\ninterface StackTraceTableState {\n    processTableData: ProcessTableData[];\n}\n\ninterface StackTraceTableProps {\n    currentStackTrace: CharmonySlice;\n    threadNames: Record<string, string>\n}\n\nexport type ProcessTableData = {\n    process: {\n        name: string;\n        status: string;\n    };\n    stacktrace: string;\n    variables: string;\n}\n\nclass StackTraceTable extends React.Component<StackTraceTableProps, StackTraceTableState> {\n    constructor(props: StackTraceTableProps) {\n        super(props);\n\n        let showStackTraceVariables = (level: number, pid: string) => {\n            const stackTrace = this.props.currentStackTrace.idToStackTrace[pid];\n            const trace = stackTrace.callStack[level];\n            if (trace)\n                return Object.entries(trace.vars).map(([name, value]) => {\n                    return `${name} = ${this.formatVariableValue(value)}`;\n                }).join(\"\\n\");\n            else\n                return \"\";\n        }\n\n        let mapProcesses = (obj: Record<string, CharmonyStackTrace>) => Object.keys(obj).map((pid, rowNumber) => {\n            const traceData = obj[pid];\n            let convertedTree: ProcessTableData = {\n                process: {\n                    name: this.props.threadNames[pid],\n                    status: traceData.fullStatus\n                },\n                stacktrace: traceData.callStack.map((stack, level) => stack.method).join(\"\\n\"),\n                variables: showStackTraceVariables(0, pid)\n            }\n            return convertedTree;\n        });\n\n        this.state = {\n            processTableData: mapProcesses(this.props.currentStackTrace.idToStackTrace)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        const columns = [\n            {\n                title: 'Process',\n                dataIndex: 'process',\n                key: 'process',\n                render: (text: { name: string; status: string }) => {\n                    let statusRender = (status: string) => {\n                        switch (status) {\n                            case \"running\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"running atomic\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable atomic\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"failed\":\n                                return <CloseSquareTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked atomic\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"terminated\":\n                                return <CheckSquareTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"choosing\":\n                                return <QuestionCircleTwoTone twoToneColor=\"#d4b106\" />;\n                            default:\n                                console.log(status);\n                                return <WarningTwoTone />;\n                        }\n                    }\n\n                    return (<span>\n                        <Tooltip title={text.status}>{statusRender(text.status)}</Tooltip>  {text.name}\n                    </span>);\n                }\n            },\n            {\n                title: 'Stack Trace',\n                dataIndex: 'stacktrace',\n                key: 'stacktrace',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },\n            {\n                title: 'Variables',\n                dataIndex: 'variables',\n                key: 'variables',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },];\n        return (\n            <Table\n                className=\"stacktrace-table\"\n                style={{ whiteSpace: 'pre' }}\n                columns={columns}\n                dataSource={this.state.processTableData}\n                pagination={false} />\n        );\n    }\n}\n\nexport default StackTraceTable;\n","import { PageHeader } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport SplitPane from \"react-split-pane\";\nimport { CharmonySlice, CharmonyTopLevel, ExecutionPath } from \"../types/CharmonyJson\";\nimport './Timeline.css'\nimport AssemblyCard from \"./AssemblyCard\";\nimport TimelineEditor from \"./TimelineEditor\";\nimport React from \"react\";\nimport SharedVariableCard from \"./SharedVariableCard\";\nimport StackTraceTable from \"./StackTraceTable\";\n\ninterface TimelineProps {\n    harmonyData: CharmonyTopLevel & ExecutionPath;\n}\n\ninterface TimelineState {\n    stepValue: number;\n    currentPc: number;\n    currentSlice: CharmonySlice;\n}\n\nclass Timeline extends React.Component<TimelineProps, TimelineState> {\n    constructor(props: TimelineProps) {\n        super(props);\n        let currentStep = this.props.harmonyData.microSteps[0];\n        let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n        this.state = {\n            stepValue: 0,\n            currentPc: 0,\n            currentSlice: currentSlice\n        }\n    }\n\n    setStepValue(value: number) {\n        let currentStep = this.props.harmonyData.microSteps[value];\n        if (currentStep) {\n            let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n            this.setState({\n                stepValue: value,\n                currentPc: currentStep.pc,\n                currentSlice: currentSlice\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Layout className=\"fullscreen\" >\n                <Content className=\"fullscreen\">\n                    <SplitPane split=\"horizontal\" minSize={300} defaultSize={570}>\n                        <SplitPane split=\"vertical\" minSize={100} defaultSize={300}>\n                            <div>\n                                <PageHeader\n                                    className=\"issue-header\"\n                                    title={<><ExclamationCircleOutlined />&nbsp;&nbsp;{this.props.harmonyData.issue}</>}\n                                />\n                                <SplitPane split=\"horizontal\" minSize={200} defaultSize={300}>\n                                    <AssemblyCard code={this.props.harmonyData.executedCode} pcValue={this.state.currentPc} />\n                                    <SharedVariableCard\n                                        key={JSON.stringify(this.state.currentSlice.sharedValues)}\n                                        sharedVariables={this.state.currentSlice.sharedValues} />\n                                </SplitPane>\n                            </div>\n                            <StackTraceTable\n                                key={JSON.stringify(this.state.currentSlice)}\n                                currentStackTrace={this.state.currentSlice}\n                                threadNames={this.props.harmonyData.idToThreadName} />\n                        </SplitPane>\n                        <TimelineEditor\n                            stepValue={this.state.stepValue}\n                            setStepValue={(v) => this.setStepValue(v)}\n                            blocks={this.props.harmonyData.macroSteps}\n                            slices={this.props.harmonyData.slices} />\n                    </SplitPane>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nexport default Timeline;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Timeline from './timeline/Timeline';\n\nfunction App() {\n  const [harmonyData, setHarmonyData] = useState(undefined);\n\n  React.useEffect(() => {\n    const handler = (event: MessageEvent<any>) => {\n      const { command, jsonData } = event.data; // The command and JSON data our extension sent\n      switch (command) {\n        case 'load':\n          console.log(jsonData);\n          setHarmonyData(jsonData);\n          break;\n        case 'message':\n          break;\n        case 'start':\n          break;\n      }\n    }\n\n    window.addEventListener(\"message\", handler);\n\n    // eslint-disable-next-line no-restricted-globals\n    parent.window.postMessage({ command: \"iframeReady\", data: null }, \"*\");\n\n    // clean up\n    return () => window.removeEventListener(\"message\", handler)\n  }, []);\n\n  return (\n    <>\n      {harmonyData &&\n        <Timeline harmonyData={harmonyData} />\n      }\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}