{"version":3,"sources":["graphviewer/GraphViewer.tsx","logo.svg","loading/LoadingScreen.tsx","timeline/AssemblyCard.tsx","timeline/TimelineEditor.tsx","timeline/SharedVariableCard.tsx","timeline/StackTraceTable.tsx","timeline/Timeline.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphViewer","Graphviz","options","zoom","width","height","dot","this","props","harmonyGV","replace","React","Component","LoadingScreen","state","displayStr","displayGraph","nextProps","_","setState","loadingFun","className","onClick","src","HarmonyIcon","alt","Math","floor","random","length","parent","window","postMessage","command","data","xmlns","xmlnsXlink","viewBox","preserveAspectRatio","id","d","xlinkHref","x","y","fill","AssemblyCard","listRefs","code","reduce","acc","value","set","initialPc","createRef","Map","highlightRef","scrollToValue","pcValue","get","current","scrollIntoView","behavior","block","style","top","size","title","BugOutlined","dataSource","renderItem","item","assembly","map","c","idx","pc","Item","ref","disabled","sourceCode","type","file","substring","lastIndexOf","line","position","zIndex","backgroundColor","COLOR_MAP","TimelineEditor","interval","processBarsRef","totalDuration","processObjects","processLabels","processBars","blocks","forEach","mas","tid","name","startSliceIdx","lastSliceIdx","has","push","processBar","i","s","slices","start","duration","color","processNum","onClickTimeline","bind","playing","dragging","oldValue","stepValue","scrollTo","left","setStepValue","e","preventDefault","targetElement","currentTarget","rect","getBoundingClientRect","round","clientX","scrollLeft","setInterval","tick","clearInterval","shape","icon","StepBackwardOutlined","stepBackwards","PauseOutlined","CaretRightOutlined","togglePlaying","StepForwardOutlined","stepForwards","onChange","v","flexGrow","max","span","bordered","overflowX","onMouseUp","onUnclickTimeline","onMouseLeave","onMouseMove","onDragTimeline","onMouseDown","padding","SharedVariableCard","sharedValues","treeify","obj","Object","entries","k","formatVariableValue","key","children","sharedVariables","typeofV","startsWith","toString","toUpperCase","JSON","stringify","ProjectOutlined","showIcon","defaultExpandAll","defaultSelectedKeys","switcherIcon","DownOutlined","treeData","StackTraceTable","showStackTraceVariables","level","pid","trace","currentStackTrace","idToStackTrace","callStack","vars","join","processTableData","keys","rowNumber","traceData","process","threadNames","status","fullStatus","stacktrace","stack","method","variables","columns","dataIndex","render","text","PlayCircleTwoTone","twoToneColor","CheckCircleTwoTone","CloseSquareTwoTone","MinusCircleTwoTone","CheckSquareTwoTone","QuestionCircleTwoTone","console","log","WarningTwoTone","statusRender","whiteSpace","pagination","Timeline","currentStep","harmonyData","microSteps","currentSlice","sliceIdx","currentPc","split","minSize","defaultSize","ExclamationCircleOutlined","issue","executedCode","idToThreadName","macroSteps","App","useState","undefined","setHarmonyData","setHarmonyGV","harmonyMsg","setHarmonyMsg","isFadingOut","setIsFadingOut","useEffect","handler","event","jsonData","setTimeout","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+eAUMA,EAAW,kHAcZ,OAdY,mCAEb,WACI,OACI,cAACC,EAAA,EAAQ,CAACC,QAAS,CACfC,MAAM,EACNC,MAAO,OACPC,OAAQ,SACTC,IAAKC,KAAKC,MAAMC,UAAUC,QAAQ,iBAAD,yLAM5C,KAAC,EAdY,CAASC,IAAMC,WAiBjBZ,IC3BA,MAA0B,iC,QC2F1Ba,EA1EI,kDACf,WAAYL,GAA4B,IAAD,EAOlC,OAPkC,qBACnC,cAAMA,IAEDM,MAAQ,CACTC,WAAY,EAAKP,MAAMO,WACvBN,UAAW,EAAKD,MAAMC,UACtBO,cAAc,GACjB,CACL,CA8DC,OA9DA,kDAED,SAAsBC,EAA+BC,GAQjD,OAPKX,KAAKC,MAAMC,YAAcQ,EAAUR,WAAeF,KAAKC,MAAMO,aAAeE,EAAUF,YACvFR,KAAKY,SAAS,CACVJ,WAAYE,EAAUF,WACtBN,UAAWQ,EAAUR,UACrBO,aAAeT,KAAKC,MAAMC,YAAcQ,EAAUR,aAGnD,CACX,GAAC,oBAED,WAAU,IAAD,WACCW,EAAa,CACf,uBACA,mCACA,kCACA,2BACA,qCACA,kCACA,6BACA,6BAEJ,OAAQ,mCACFb,KAAKO,MAAME,aACT,qCACI,cAAC,IAAM,CAACK,UAAU,iBAAiBC,QAAS,WAAQ,EAAKH,SAAS,CAAEH,cAAc,GAAS,EAAE,SAAC,SAC9F,cAAC,EAAW,CAACP,UAA+B,QAAtB,EAAEF,KAAKO,MAAML,iBAAS,QAAI,QAEpD,qCACI,qBAAKc,IAAKC,EAAaC,IAAI,eAAerB,MAAO,IAAKC,OAAQ,IAAKgB,UAAU,iBAC7E,oBAAIA,UAAU,wBAAuB,SAAuB,QAAvB,EAAEd,KAAKO,MAAMC,kBAAU,QAAIK,EAAWM,KAAKC,MAAMD,KAAKE,SAAWR,EAAWS,WAC/GtB,KAAKO,MAAML,UACT,cAAC,IAAM,CAACY,UAAU,gBAAgBC,QAAS,WAAQ,EAAKH,SAAS,CAAEH,cAAc,GAAQ,EAAE,SAAC,cAE/ET,KAAKO,MAAMC,YACxB,cAAC,IAAM,CAACM,UAAU,gBAAgBC,QAAS,WAEvCQ,OAAOC,OAAOC,YAAY,CAAEC,QAAS,eAAgBC,KAAM,MAAQ,IACvE,EAAE,SAAC,mBAGP,sBAAKb,UAAU,aAAac,MAAM,6BAA6BC,WAAW,+BAA+BC,QAAQ,eAAeC,oBAAoB,OAAM,UACtJ,+BACI,sBAAMC,GAAG,YAAYC,EAAE,+EAE3B,mBAAGnB,UAAU,QAAO,SAChB,qBAAKoB,UAAU,aAAaC,EAAE,KAAKC,EAAE,IAAIC,KAAK,4BAElD,mBAAGvB,UAAU,QAAO,SAChB,qBAAKoB,UAAU,aAAaC,EAAE,KAAKC,EAAE,IAAIC,KAAK,4BAElD,mBAAGvB,UAAU,QAAO,SAChB,qBAAKoB,UAAU,aAAaC,EAAE,KAAKC,EAAE,IAAIC,KAAK,cAGtD,qBAAKvB,UAAU,wBAK/B,KAAC,EAvEc,CAASV,IAAMC,W,2GCyDnBiC,G,OAzDG,kDACd,WAAYrC,GAA2B,IAAD,EASjC,OATiC,qBAClC,cAAMA,IAEDM,MAAQ,CACTgC,SAAU,EAAKtC,MAAMuC,KAAKC,QAAO,SAACC,EAAKC,GAEnC,OADAD,EAAIE,IAAID,EAAME,UAAWzC,IAAM0C,aACxBJ,CACX,GAAG,IAAIK,KACPC,aAAc5C,IAAM0C,aACvB,CACL,CA2CC,OA3CA,kDAED,SAAsBpC,EAA8BC,GAEhD,OADAX,KAAKiD,cAAcvC,EAAUwC,SACtBlD,KAAKC,MAAMuC,OAAS9B,EAAU8B,IACzC,GAAC,2BAED,SAAcU,GAAkB,IAAD,EACK,QAAhC,EAAAlD,KAAKO,MAAMgC,SAASY,IAAID,UAAQ,OAAhC,EAAkCE,QAAQC,eAAe,CACrDC,SAAU,OACVC,MAAO,UAEXvD,KAAKO,MAAMyC,aAAaI,QAAQI,MAAMC,IAAiB,GAAVP,EAAgB,IACjE,GAAC,oBAED,WAAU,IAAD,OACL,OACI,eAAC,IAAI,CAACQ,KAAK,QAAQC,MAAO,qCAAE,cAACC,EAAA,EAAW,IAAG,eAAc9C,UAAU,gBAAe,UAC9E,cAAC,IAAI,CACD4C,KAAK,QACL5C,UAAU,YACV+C,WAAY7D,KAAKC,MAAMuC,KACvBsB,WAAY,SAAAC,GAAI,OAAI,mCACfA,EAAKC,SAASC,KAAI,SAACC,EAAGC,GACnB,IAAMC,EAAKD,EAAMJ,EAAKlB,UACtB,OAAO,cAAC,IAAKwB,KAAI,CAACvD,UAAU,qBAAoB,SAC5C,sBAAKwD,IAAK,EAAK/D,MAAMgC,SAASY,IAAIiB,GAAI,UAClC,cAAC,IAAI,CAACG,UAAQ,WAAEH,IAAU,OACzBF,EAAEF,SACH,cAAC,IAAO,CACJL,MAAOI,EAAKS,WAAW,SACvB,eAAC,IAAI,CAACC,KAAK,UAAU3D,UAAU,qBAAoB,UAC9CiD,EAAKW,KAAKC,UAAUZ,EAAKW,KAAKE,YAAY,KAAO,GAAGzE,QAAQ,OAAQ,IAAI,IAAE4D,EAAKc,cAP1CT,EAY1D,KACD,IAEP,qBAAKE,IAAKtE,KAAKO,MAAMyC,aAAcQ,MAAO,CAAEsB,SAAU,WAAYrB,IAAK,EAAG5D,MAAO,OAAQC,OAAQ,GAAIiF,OAAQ,EAAGC,gBAAiB,iBAG7I,KAAC,EAtDa,CAAS5E,IAAMC,Y,uECV3B4E,G,OAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC5F,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACxF,UAAW,YAqNAC,EAzLK,kDAIhB,WAAYjF,GAA6B,IAAD,yBACpC,cAAMA,IAJVkF,cAAQ,IACRC,oBAAc,EAKV,IAAIC,EAAgB,EAChBC,EAAiB,IAAIvC,IACrBwC,EAA0B,GAC1BC,EAA4B,GAEpB,QAAZ,EAAAvF,EAAMwF,cAAM,OAAZ,EAAcC,SAAQ,SAACC,GACnB,IAAQC,EAA2CD,EAA3CC,IAAKC,EAAsCF,EAAtCE,KAAMC,EAAgCH,EAAhCG,cAAeC,EAAiBJ,EAAjBI,aAC7BT,EAAeU,IAAIJ,KAEpBL,EAAcU,KAAKJ,GAGnBP,EAAe1C,IAAIgD,EAAK,CAAEH,OAAQ,MAKtC,IAFA,IAAMS,EAAaZ,EAAenC,IAAIyC,GAE7BO,EAAIL,EAAeK,EAAIJ,EAAcI,IAAK,CAC/C,IAAMC,EAAInG,EAAMoG,OAAOF,GACb,OAAVD,QAAU,IAAVA,KAAYT,OAAOQ,KAAK,CAAEK,MAAOjB,EAAe/D,OAAQ8E,EAAEG,SAAUC,MAAO,KAC3EnB,GAAiBe,EAAEG,QACvB,CACJ,IAEA,IAAIE,EAAa,EAgBhB,OAfDnB,EAAeI,SAAQ,SAACQ,GACpBA,EAAWT,OAAOC,SAAQ,SAACnC,GAAK,OAAKA,EAAMiD,MAAQvB,EAAUwB,EAAaxB,EAAU3D,OAAO,IAC3FkE,EAAYS,KAAKC,GACjBO,GACJ,IAEA,EAAKrB,eAAiBhF,IAAM0C,YAC5B,EAAK4D,gBAAkB,EAAKA,gBAAgBC,KAAK,gBAEjD,EAAKpG,MAAQ,CACTqG,SAAS,EACTC,UAAU,EACVxB,cAAeA,EACfE,cAAeA,EACfC,YAAaA,GAChB,CACL,CAsIC,OAtIA,iCAED,WACI,IAEiD,EAF7CsB,EAAW9G,KAAKC,MAAM8G,UACtB/G,KAAKO,MAAMqG,UACPE,EAAW,EAAI9G,KAAKO,MAAM8E,eACC,QAA3B,EAAArF,KAAKoF,eAAehC,eAAO,OAA3B,EAA6B4D,SAAS,CAClCvD,IAAK,EACLwD,KAvFG,GAuFIH,EAAW,GAClBxD,SAAU,SAEdtD,KAAKkH,aAAaJ,EAAW,IAE7B9G,KAAKY,SAAS,CAAEgG,SAAS,IAIrC,GAAC,0BAED,WACI,IAAIE,EAAW9G,KAAKC,MAAM8G,UACtBD,EAAW9G,KAAKO,MAAM8E,eACtBrF,KAAKkH,aAAaJ,EAAW,EACrC,GAAC,2BAED,WACI,IAAIA,EAAW9G,KAAKC,MAAM8G,UACtBD,EAAW,GACX9G,KAAKkH,aAAaJ,EAAW,EACrC,GAAC,2BAED,WACI9G,KAAKY,SAAS,CAAEgG,SAAU5G,KAAKO,MAAMqG,SACzC,GAAC,0BAED,SAAajE,GACT3C,KAAKC,MAAMiH,aAAavE,EAC5B,GAAC,6BAED,SAAgBwE,GACZA,EAAEC,iBACFpH,KAAKY,SAAS,CAAEiG,UAAU,IAC1B7G,KAAKY,SAAS,CAAEgG,SAAS,IACzB,IAAIS,EAAiBF,EAAEG,cACnBC,EAAOF,EAAcG,wBACzBxH,KAAKkH,aAAa/F,KAAKsG,OAAON,EAAEO,QAAUH,EAAKN,KAAOI,EAAcM,YA5HrD,GA6HnB,GAAC,4BAED,SAAeR,GAEX,GADAA,EAAEC,iBACEpH,KAAKO,MAAMsG,SAAS,CACpB,IAAIQ,EAAiBF,EAAEG,cACnBC,EAAOF,EAAcG,wBACzBxH,KAAKkH,aAAa/F,KAAKsG,OAAON,EAAEO,QAAUH,EAAKN,KAAOI,EAAcM,YApIzD,GAqIf,CACJ,GAAC,+BAED,SAAkBR,GACdA,EAAEC,iBACFpH,KAAKY,SAAS,CAAEiG,UAAU,GAC9B,GAAC,+BAED,WAAqB,IAAD,OAChB7G,KAAKmF,SAAWyC,aAAY,kBAAM,EAAKC,MAAM,GAAE,IACnD,GAAC,kCAED,WACQ7H,KAAKmF,UACL2C,cAAc9H,KAAKmF,SAC3B,GAAC,oBAED,WAAU,IAAD,OACL,OACI,eAAC,IAAG,CAACrE,UAAU,gBAAe,UAC1B,eAAC,IAAG,CAACA,UAAU,eAAc,UACzB,cAAC,IAAM,CAACiH,MAAM,SACVC,KAAM,cAACC,EAAA,EAAoB,IAC3BvE,KAAK,SAAS5C,UAAU,mBACxBC,QAAS,kBAAM,EAAKmH,eAAe,IACvC,cAAC,IAAM,CAACH,MAAM,SACVC,KAAMhI,KAAKO,MAAMqG,QAAU,cAACuB,EAAA,EAAa,IAAM,cAACC,EAAA,EAAkB,IAClE1E,KAAK,SACL5C,UAAU,mBACVC,QAAS,kBAAM,EAAKsH,eAAe,IACvC,cAAC,IAAM,CAACN,MAAM,SACVC,KAAM,cAACM,EAAA,EAAmB,IAC1B5E,KAAK,SACL5C,UAAU,mBACVC,QAAS,kBAAM,EAAKwH,cAAc,IACtC,cAAC,IAAM,CAACC,SAAU,SAACC,GAAC,OAAK,EAAKvB,aAAauB,EAAE,EAAE9F,MAAO3C,KAAKC,MAAM8G,UAAWvD,MAAO,CAAEkF,SAAU,GAAKC,IAAK3I,KAAKO,MAAM8E,cAAevE,UAAU,uBAEjJ,eAAC,IAAG,CAACA,UAAU,kBAAiB,UAC5B,cAAC,IAAG,CAAC8H,KAAM,EAAE,SACT,cAAC,IAAI,CACDC,UAAU,EACVhF,WAAY7D,KAAKO,MAAMgF,cACvBzB,WAAY,SAAAC,GAAI,OACZ,cAAC,IAAKM,KAAI,CAACvD,UAAU,yBAAwB,SACxCiD,GACO,MAIxB,eAAC,IAAG,CACA6E,KAAM,GACNtE,IAAKtE,KAAKoF,eACV5B,MAAO,CAAEsF,UAAW,UACpBC,UAAW/I,KAAKgJ,kBAAkBrC,KAAK3G,MACvCiJ,aAAcjJ,KAAKgJ,kBAAkBrC,KAAK3G,MAC1CkJ,YAAalJ,KAAKmJ,eAAexC,KAAK3G,MACtCoJ,YAAapJ,KAAK0G,gBAAgBC,KAAK3G,MAAM,UAC7C,cAAC,IAAI,CACD6I,UAAU,EACVhF,WAAY7D,KAAKO,MAAMiF,YACvBhC,MAAO,CAAE3D,MAjMd,EAiMqBG,KAAKO,MAAM8E,eAC3BvB,WAAY,SAAAC,GAAI,OACZ,cAAC,IAAKM,KAAI,CAACb,MAAO,CAAEsB,SAAU,WAAYuE,QAAS,EAAGvJ,OAAQ,OAAS,SAClEiE,EAAK0B,OAAOxB,KAAI,SAACV,GAAK,OAAK,qBACxBC,MAAO,CACHsB,SAAU,WACVmC,KAvMrB,EAuM2B1D,EAAM+C,MACZzG,MAxMrB,EAwM4B0D,EAAMjC,OACbxB,OAAQ,MACRkF,gBAAiBzB,EAAMiD,QAEzB,KACE,IAGpB,qBAAK1F,UAAU,yBAAyB0C,MAAO,CAAEyD,KAhNlD,EAgNwDjH,KAAKC,MAAM8G,qBAKtF,KAAC,EAtLe,CAAS3G,IAAMC,W,2BC0CpBiJ,EA7DS,kDACpB,WAAYrJ,GAAiC,IAAD,sBAsBtC,OArBF,cAAMA,IAmBDM,MAAQ,CACTgJ,aAlBU,SAAVC,EAAWC,GAAQ,OAAKC,OAAOC,QAAQF,GAAKxF,KAAI,YAAa,IAAD,mBAAV2F,EAAC,KAAEnB,EAAC,KAetD,OAbS,MAALA,GAA0B,kBAANA,EACJ,CACZ9E,MAAM,GAAD,OAAKiG,EAAC,aAAK,EAAKC,oBAAoBpB,IACzCqB,IAAKF,EACLG,SAAU,IAGE,CACZpG,MAAOiG,EACPE,IAAKF,EACLG,SAAUP,EAAQf,GAI9B,GAAG,CAEee,CAAQ,EAAKvJ,MAAM+J,kBACnC,CACN,CAkCC,OAlCA,gDAED,SAAoBvB,GAChB,IAAMwB,SAAiBxB,EACvB,GAAgB,WAAZwB,EACA,OAAIxB,EAAEyB,WAAW,KACP,GAAN,OAAUzB,GAEJ,IAAN,OAAWA,EAAC,KAGpB,GAAgB,YAAZwB,GAAqC,WAAZA,EAAsB,CAC/C,IAAM7D,EAAIqC,EAAE0B,WACZ,OAAO/D,EAAE,GAAGgE,cAAgBhE,EAAEzB,UAAU,EAC5C,CACA,OAAS,MAAL8D,EACO,OAEA4B,KAAKC,UAAU7B,EAE9B,GAAC,oBAED,WACI,OACI,cAAC,IAAI,CAAC/E,KAAK,QAAQC,MAAO,qCAAE,cAAC4G,EAAA,EAAe,IAAG,gBAAezJ,UAAU,iBAAgB,SACpF,cAAC,IAAI,CACD0J,UAAQ,EACRC,kBAAgB,EAChBC,oBAAqB,CAAC,SACtBC,aAAc,cAACC,EAAA,EAAY,IAC3BC,SAAU7K,KAAKO,MAAMgJ,gBAIrC,KAAC,EA1DmB,CAASnJ,IAAMC,W,wECsIxByK,G,OAhIM,kDACjB,WAAY7K,GAA8B,IAAD,sBACrC,cAAMA,GAEN,IAWoBwJ,EAXhBsB,EAA0B,SAACC,EAAeC,GAC1C,IACMC,EADa,EAAKjL,MAAMkL,kBAAkBC,eAAeH,GACtCI,UAAUL,GACnC,OAAIE,EACOxB,OAAOC,QAAQuB,EAAMI,MAAMrH,KAAI,YAAoB,IAAD,mBAAjB4B,EAAI,KAAElD,EAAK,KAC/C,MAAM,GAAN,OAAUkD,EAAI,cAAM,EAAKgE,oBAAoBlH,GACjD,IAAG4I,KAAK,MAED,EACf,EAiBE,OAFF,EAAKhL,MAAQ,CACTiL,kBAdgB/B,EAce,EAAKxJ,MAAMkL,kBAAkBC,eAdA1B,OAAO+B,KAAKhC,GAAKxF,KAAI,SAACgH,EAAKS,GACvF,IAAMC,EAAYlC,EAAIwB,GAStB,MARsC,CAClCW,QAAS,CACL/F,KAAM,EAAK5F,MAAM4L,YAAYZ,GAC7Ba,OAAQH,EAAUI,YAEtBC,WAAYL,EAAUN,UAAUpH,KAAI,SAACgI,EAAOjB,GAAK,OAAKiB,EAAMC,MAAM,IAAEX,KAAK,MACzEY,UAAWpB,EAAwB,EAAGE,GAG9C,MAIE,CACN,CA8FC,OA9FA,gDAED,SAAoBxC,GAChB,IAAMwB,SAAiBxB,EACvB,GAAgB,WAAZwB,EACA,OAAIxB,EAAEyB,WAAW,KACP,GAAN,OAAUzB,GAEJ,IAAN,OAAWA,EAAC,KAGpB,GAAgB,YAAZwB,GAAqC,WAAZA,EAAsB,CAC/C,IAAM7D,EAAIqC,EAAE0B,WACZ,OAAO/D,EAAE,GAAGgE,cAAgBhE,EAAEzB,UAAU,EAC5C,CACA,OAAS,MAAL8D,EACO,OAEA4B,KAAKC,UAAU7B,EAE9B,GAAC,oBAED,WACI,IAAM2D,EAAU,CACZ,CACIzI,MAAO,UACP0I,UAAW,UACXvC,IAAK,UACLwC,OAAQ,SAACC,GAiCL,OAAQ,iCACJ,cAAC,IAAO,CAAC5I,MAAO4I,EAAKT,OAAO,SAjCb,SAACA,GAChB,OAAQA,GACJ,IAAK,UAEL,IAAK,iBAEL,IAAK,2BACD,OAAO,cAACU,EAAA,EAAiB,CAACC,aAAa,YAC3C,IAAK,WAEL,IAAK,kBAEL,IAAK,4BACD,OAAO,cAACC,EAAA,EAAkB,CAACD,aAAa,YAC5C,IAAK,SACD,OAAO,cAACE,EAAA,EAAkB,CAACF,aAAa,YAC5C,IAAK,UAEL,IAAK,iBAEL,IAAK,2BACD,OAAO,cAACG,EAAA,EAAkB,CAACH,aAAa,YAC5C,IAAK,aACD,OAAO,cAACI,EAAA,EAAkB,CAACJ,aAAa,YAC5C,IAAK,WACD,OAAO,cAACK,EAAA,EAAqB,CAACL,aAAa,YAC/C,QAEI,OADAM,QAAQC,IAAIlB,GACL,cAACmB,EAAA,EAAc,IAElC,CAGkCC,CAAaX,EAAKT,UAAkB,KAAGS,EAAK1G,OAElF,GAEJ,CACIlC,MAAO,cACP0I,UAAW,aACXvC,IAAK,aACLwC,OAAQ,SAACC,GAAY,OACjB,+BACKA,GACE,GAGf,CACI5I,MAAO,YACP0I,UAAW,YACXvC,IAAK,YACLwC,OAAQ,SAACC,GAAY,OACjB,+BACKA,GACE,IAGnB,OACI,cAAC,IAAK,CACFzL,UAAU,mBACV0C,MAAO,CAAE2J,WAAY,OACrBf,QAASA,EACTvI,WAAY7D,KAAKO,MAAMiL,iBACvB4B,YAAY,GAExB,KAAC,EA7HgB,CAAShN,IAAMC,YC2DrBgN,GA7DD,kDACV,WAAYpN,GAAuB,IAAD,sBAE9B,IAAIqN,GADJ,cAAMrN,IACiBA,MAAMsN,YAAYC,WAAW,GAChDC,EAAe,EAAKxN,MAAMsN,YAAYlH,OAAOiH,EAAYI,UAM5D,OAJD,EAAKnN,MAAQ,CACTwG,UAAW,EACX4G,UAAW,EACXF,aAAcA,GACjB,CACL,CA+CC,OA/CA,yCAED,SAAa9K,GACT,IAAI2K,EAActN,KAAKC,MAAMsN,YAAYC,WAAW7K,GACpD,GAAI2K,EAAa,CACb,IAAIG,EAAezN,KAAKC,MAAMsN,YAAYlH,OAAOiH,EAAYI,UAE7D1N,KAAKY,SAAS,CACVmG,UAAWpE,EACXgL,UAAWL,EAAYlJ,GACvBqJ,aAAcA,GAEtB,CACJ,GAAC,oBAED,WAAU,IAAD,OACL,OACI,cAAC,IAAM,CAAC3M,UAAU,aAAY,SAC1B,cAAC,UAAO,CAACA,UAAU,aAAY,SAC3B,eAAC,IAAS,CAAC8M,MAAM,aAAaC,QAAS,IAAKC,YAAa,MAAM,UAC3D,eAAC,IAAS,CAACF,MAAM,WAAWC,QAAS,IAAKC,YAAa,IAAI,UACvD,gCACI,cAAC,IAAU,CACPhN,UAAU,eACV6C,MAAO,qCAAE,cAACoK,EAAA,EAAyB,IAAG,WAAa/N,KAAKC,MAAMsN,YAAYS,WAE9E,eAAC,IAAS,CAACJ,MAAM,aAAaC,QAAS,IAAKC,YAAa,MAAM,UAC3D,cAAC,EAAY,CAACtL,KAAMxC,KAAKC,MAAMsN,YAAYU,aAAc/K,QAASlD,KAAKO,MAAMoN,YAC7E,cAAC,EAAkB,CAEf3D,gBAAiBhK,KAAKO,MAAMkN,aAAalE,cADpCc,KAAKC,UAAUtK,KAAKO,MAAMkN,aAAalE,qBAIxD,cAAC,EAAe,CAEZ4B,kBAAmBnL,KAAKO,MAAMkN,aAC9B5B,YAAa7L,KAAKC,MAAMsN,YAAYW,gBAF/B7D,KAAKC,UAAUtK,KAAKO,MAAMkN,kBAIvC,cAAC,EAAc,CACX1G,UAAW/G,KAAKO,MAAMwG,UACtBG,aAAc,SAACuB,GAAC,OAAK,EAAKvB,aAAauB,EAAE,EACzChD,OAAQzF,KAAKC,MAAMsN,YAAYY,WAC/B9H,OAAQrG,KAAKC,MAAMsN,YAAYlH,eAKvD,KAAC,EA1DS,CAASjG,IAAMC,WC4Bd+N,OA7Cf,WACE,MAAsCC,wBAASC,GAAU,mBAAlDf,EAAW,KAAEgB,EAAc,KAClC,EAAkCF,wBAASC,GAAU,mBAA9CpO,EAAS,KAAEsO,EAAY,KAC9B,EAAoCH,wBAASC,GAAU,mBAAhDG,EAAU,KAAEC,EAAa,KAChC,EAAsCL,oBAAS,GAAM,mBAA9CM,EAAW,KAAEC,EAAc,KAgClC,OA7BAxO,IAAMyO,WAAU,WACd,IAAMC,EAAU,SAACC,GACf,MAA8BA,EAAMpN,KAA5BD,EAAO,EAAPA,QAASsN,EAAQ,EAARA,SACjB,OAAQtN,GACN,IAAK,OACHkN,GAAe,GACfK,YAAW,kBAAML,GAAe,EAAM,GAAE,KACxCL,EAAeS,GACf,MACF,IAAK,aACDR,EAAaQ,GACf,MACF,IAAK,UACHN,EAAcM,GAKpB,EAQA,OANAxN,OAAO0N,iBAAiB,UAAWJ,GAGnCvN,OAAOC,OAAOC,YAAY,CAAEC,QAAS,cAAeC,KAAM,MAAQ,KAG3D,kBAAMH,OAAO2N,oBAAoB,UAAWL,EAAQ,CAC7D,GAAG,IAGD,qBAAKhO,UAAW6N,EAAc,eAAiB,cAAc,SACzDpB,IAAgBoB,EACd,cAAC,GAAQ,CAACpB,YAAaA,IACvB,cAAC,EAAa,CAAC/M,WAAYiO,EAAYvO,UAAWA,KAG5D,EClCekP,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECNAQ,IAASvD,OACP,cAAC,IAAMwD,WAAU,UACf,cAAC,GAAG,MAENC,SAASC,eAAe,SAM1BZ,I","file":"static/js/main.6b5bc6af.chunk.js","sourcesContent":["import './GraphViewer.css'\nimport React from \"react\";\nimport { Graphviz } from 'graphviz-react';\n\ninterface GraphViewerProps {\n    harmonyGV: string;\n}\n\ninterface GraphViewerState { }\n\nclass GraphViewer extends React.Component<GraphViewerProps, GraphViewerState> {\n\n    render() {\n        return (\n            <Graphviz options={{\n                zoom: true,\n                width: \"100%\",\n                height: \"100vh\"\n            }} dot={this.props.harmonyGV.replace(`rankdir = \"LR\"`, `rankdir = \"LR\"\n                bgcolor=\"black\"\n                node[style=outline, color=white, fontcolor=white]\n                edge[color=white, fontcolor=white]\n            `)} />\n        );\n    }\n}\n\nexport default GraphViewer;\n","export default __webpack_public_path__ + \"static/media/logo.da5a3132.svg\";","import React from \"react\";\nimport './LoadingScreen.css'\nimport GraphViewer from '../graphviewer/GraphViewer';\nimport HarmonyIcon from '../logo.svg'\nimport { Button } from \"antd\";\n\ninterface LoadingScreenState {\n    displayStr?: string;\n    harmonyGV?: string;\n    displayGraph: boolean;\n}\n\ninterface LoadingScreenProps {\n    displayStr?: string;\n    harmonyGV?: string;\n}\n\nclass LoadingScreen extends React.Component<LoadingScreenProps, LoadingScreenState> {\n    constructor(props: LoadingScreenProps) {\n        super(props);\n\n        this.state = {\n            displayStr: this.props.displayStr,\n            harmonyGV: this.props.harmonyGV,\n            displayGraph: false\n        }\n    }\n\n    shouldComponentUpdate(nextProps: LoadingScreenProps, _: any) {\n        if ((this.props.harmonyGV !== nextProps.harmonyGV) || (this.props.displayStr !== nextProps.displayStr)) {\n            this.setState({\n                displayStr: nextProps.displayStr,\n                harmonyGV: nextProps.harmonyGV,\n                displayGraph: (this.props.harmonyGV !== nextProps.harmonyGV)\n            });\n        }\n        return true;\n    }\n\n    render() {\n        const loadingFun = [\n            \"Strumming threads...\",\n            \"Simulating parallel universes...\",\n            \"Revising the halting problem...\",\n            \"Adding the 51st state...\",\n            \"Testing for the delta invariant...\",\n            \"Modeling ecological collapse...\",\n            \"Guaranteeing money back...\",\n            \"Some assembly required...\"\n        ];\n        return (<>\n            {(this.state.displayGraph) ?\n                <>\n                    <Button className=\"hide-graph-btn\" onClick={() => { this.setState({ displayGraph: false }) }}>Back</Button>\n                    <GraphViewer harmonyGV={this.state.harmonyGV ?? \"\"} />\n                </> :\n                <>\n                    <img src={HarmonyIcon} alt=\"Harmony Logo\" width={128} height={128} className=\"harmony-icon\" />\n                    <h2 className=\"harmony-icon-subtitle\">{this.state.displayStr ?? loadingFun[Math.floor(Math.random() * loadingFun.length)]}</h2>\n                    {(this.state.harmonyGV) ?\n                        <Button className=\"see-graph-btn\" onClick={() => { this.setState({ displayGraph: true }) }}>\n                            See Graph\n                        </Button> : (this.state.displayStr) &&\n                        <Button className=\"see-graph-btn\" onClick={() => {\n                            // eslint-disable-next-line no-restricted-globals\n                            parent.window.postMessage({ command: \"requestGraph\", data: null }, \"*\");\n                        }}>\n                            Generate Graph\n                        </Button>}\n                    <svg className=\"hero-waves\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 24 150 28 \" preserveAspectRatio=\"none\">\n                        <defs>\n                            <path id=\"wave-path\" d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\" />\n                        </defs>\n                        <g className=\"wave1\">\n                            <use xlinkHref=\"#wave-path\" x=\"50\" y=\"2\" fill=\"rgba(255,255,255, .1)\" />\n                        </g>\n                        <g className=\"wave2\">\n                            <use xlinkHref=\"#wave-path\" x=\"50\" y=\"0\" fill=\"rgba(255,255,255, .2)\" />\n                        </g>\n                        <g className=\"wave3\">\n                            <use xlinkHref=\"#wave-path\" x=\"50\" y=\"8\" fill=\"#fff\" />\n                        </g>\n                    </svg>\n                    <div className=\"hero-bottom-bar\" />\n                </>\n            }\n        </>\n        );\n    }\n}\n\nexport default LoadingScreen;\n","import { BugOutlined } from \"@ant-design/icons\";\nimport { Card, List, Tooltip } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { CharmonyExecutedCode } from \"../types/CharmonyJson\";\nimport './AssemblyCard.css'\n\ninterface AssemblyCardState {\n    listRefs: Map<number, React.RefObject<any>>;\n    highlightRef: React.RefObject<any>;\n}\n\ninterface AssemblyCardProps {\n    pcValue: number;\n    code: CharmonyExecutedCode[];\n}\n\nclass AssemblyCard extends React.Component<AssemblyCardProps, AssemblyCardState> {\n    constructor(props: AssemblyCardProps) {\n        super(props);\n\n        this.state = {\n            listRefs: this.props.code.reduce((acc, value) => {\n                acc.set(value.initialPc, React.createRef());\n                return acc;\n            }, new Map()),\n            highlightRef: React.createRef()\n        }\n    }\n\n    shouldComponentUpdate(nextProps: AssemblyCardProps, _: any) {\n        this.scrollToValue(nextProps.pcValue);\n        return this.props.code !== nextProps.code;\n    }\n\n    scrollToValue(pcValue: number) {\n        this.state.listRefs.get(pcValue)?.current.scrollIntoView({\n            behavior: 'auto',\n            block: 'start',\n        });\n        this.state.highlightRef.current.style.top = (pcValue * 25) + \"px\";\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><BugOutlined /> Assembly</>} className=\"assembly-card\">\n                <List\n                    size=\"small\"\n                    className=\"card-list\"\n                    dataSource={this.props.code}\n                    renderItem={item => <>\n                        {item.assembly.map((c, idx) => {\n                            const pc = idx + item.initialPc;\n                            return <List.Item className=\"assembly-list-item\" key={pc}>\n                                <div ref={this.state.listRefs.get(pc)}>\n                                    <Text disabled>{pc}</Text>&nbsp;\n                                    {c.assembly}\n                                    <Tooltip\n                                        title={item.sourceCode}>\n                                        <Text type=\"warning\" className=\"assembly-list-text\">\n                                            {item.file.substring(item.file.lastIndexOf('/') + 1).replace(\".hny\", \"\")}:{item.line}\n                                        </Text>\n                                    </Tooltip>\n                                </div>\n                            </List.Item>\n                        })}\n                    </>}\n                />\n                <div ref={this.state.highlightRef} style={{ position: \"absolute\", top: 0, width: \"100%\", height: 25, zIndex: 8, backgroundColor: \"#ffffff20\" }}></div>\n            </Card>\n        );\n    }\n}\n\nexport default AssemblyCard;\n","import { CaretRightOutlined, PauseOutlined, StepBackwardOutlined, StepForwardOutlined } from \"@ant-design/icons\";\nimport { Button, Col, List, Row, Slider } from \"antd\";\nimport React from \"react\";\nimport { CharmonyMacroStep, CharmonySlice } from \"../types/CharmonyJson\";\nimport \"./TimelineEditor.css\"\n\nconst BAR_LEN_FACTOR = 5;\nconst COLOR_MAP = ['#c62828', '#AD1457', '#6A1B9A', '#4527A0', '#283593', '#1565C0', '#0277BD', '#00838F',\n    '#00695C', '#2E7D32', '#558B2F', '#9E9D24', '#F9A825', '#FF8F00', '#EF6C00', '#D84315', '#4E342E',\n    '#424242', '#37474F'\n];\n\ninterface TimelineEditorProps {\n    stepValue: number;\n    setStepValue: (v: number) => void;\n    blocks: CharmonyMacroStep[];\n    slices: CharmonySlice[];\n}\n\ninterface TimelineEditorState {\n    playing: boolean;\n    dragging: boolean;\n    totalDuration: number;\n    processLabels: String[];\n    processBars: ProcessBar[];\n}\n\ninterface ProcessBlock {\n    start: number;\n    length: number;\n    color: string;\n}\n\ninterface ProcessBar {\n    blocks: ProcessBlock[];\n}\n\nclass TimelineEditor extends React.Component<TimelineEditorProps, TimelineEditorState> {\n    interval: NodeJS.Timeout | undefined;\n    processBarsRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: TimelineEditorProps) {\n        super(props);\n\n        let totalDuration = 0;\n        let processObjects = new Map<string, ProcessBar>();\n        let processLabels: String[] = [];\n        let processBars: ProcessBar[] = [];\n\n        props.blocks?.forEach((mas) => {\n            const { tid, name, startSliceIdx, lastSliceIdx } = mas;\n            if (!processObjects.has(tid)) {\n                // Label Generation\n                processLabels.push(name);\n\n                // Row Generation\n                processObjects.set(tid, { blocks: [] });\n            }\n\n            const processBar = processObjects.get(tid);\n\n            for (let i = startSliceIdx; i < lastSliceIdx; i++) {\n                const s = props.slices[i];\n                processBar?.blocks.push({ start: totalDuration, length: s.duration, color: \"\" });\n                totalDuration += s.duration;\n            }\n        });\n\n        let processNum = 0;\n        processObjects.forEach((processBar) => {\n            processBar.blocks.forEach((block) => block.color = COLOR_MAP[processNum % COLOR_MAP.length]);\n            processBars.push(processBar);\n            processNum++;\n        });\n\n        this.processBarsRef = React.createRef();\n        this.onClickTimeline = this.onClickTimeline.bind(this);\n\n        this.state = {\n            playing: false,\n            dragging: false,\n            totalDuration: totalDuration,\n            processLabels: processLabels,\n            processBars: processBars\n        }\n    }\n\n    tick() {\n        let oldValue = this.props.stepValue;\n        if (this.state.playing) {\n            if (oldValue + 1 < this.state.totalDuration) {\n                this.processBarsRef.current?.scrollTo({\n                    top: 0,\n                    left: (oldValue + 1) * BAR_LEN_FACTOR,\n                    behavior: 'auto'\n                });\n                this.setStepValue(oldValue + 1);\n            } else {\n                this.setState({ playing: false });\n            }\n        }\n\n    }\n\n    stepForwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue < this.state.totalDuration)\n            this.setStepValue(oldValue + 1);\n    }\n\n    stepBackwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue > 0)\n            this.setStepValue(oldValue - 1);\n    }\n\n    togglePlaying() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    setStepValue(value: number){\n        this.props.setStepValue(value);\n    }\n\n    onClickTimeline(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        e.preventDefault();\n        this.setState({ dragging: true });\n        this.setState({ playing: false });\n        let targetElement = (e.currentTarget as HTMLElement)\n        let rect = targetElement.getBoundingClientRect();\n        this.setStepValue(Math.round((e.clientX - rect.left + targetElement.scrollLeft) / BAR_LEN_FACTOR));\n    }\n\n    onDragTimeline(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        e.preventDefault();\n        if (this.state.dragging){\n            let targetElement = (e.currentTarget as HTMLElement)\n            let rect = targetElement.getBoundingClientRect();\n            this.setStepValue(Math.round((e.clientX - rect.left + targetElement.scrollLeft) / BAR_LEN_FACTOR));\n        }\n    }\n\n    onUnclickTimeline(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        e.preventDefault();\n        this.setState({ dragging: false });\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount() {\n        if (this.interval)\n            clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <Col className=\"timeline-card\">\n                <Row className=\"timeline-bar\">\n                    <Button shape=\"circle\"\n                        icon={<StepBackwardOutlined />}\n                        size=\"middle\" className=\"timeline-bar-btn\"\n                        onClick={() => this.stepBackwards()} />\n                    <Button shape=\"circle\"\n                        icon={this.state.playing ? <PauseOutlined /> : <CaretRightOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.togglePlaying()} />\n                    <Button shape=\"circle\"\n                        icon={<StepForwardOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.stepForwards()} />\n                    <Slider onChange={(v) => this.setStepValue(v)} value={this.props.stepValue} style={{ flexGrow: 1 }} max={this.state.totalDuration} className=\"timeline-slider\" />\n                </Row>\n                <Row className=\"timeline-holder\">\n                    <Col span={6}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processLabels}\n                            renderItem={item => (\n                                <List.Item className=\"timeline-process-title\">\n                                    {item}\n                                </List.Item>\n                            )}\n                        />\n                    </Col>\n                    <Col \n                        span={18} \n                        ref={this.processBarsRef} \n                        style={{ overflowX: 'scroll' }} \n                        onMouseUp={this.onUnclickTimeline.bind(this)}\n                        onMouseLeave={this.onUnclickTimeline.bind(this)}\n                        onMouseMove={this.onDragTimeline.bind(this)}\n                        onMouseDown={this.onClickTimeline.bind(this)}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processBars}\n                            style={{ width: this.state.totalDuration * BAR_LEN_FACTOR }}\n                            renderItem={item => (\n                                <List.Item style={{ position: 'relative', padding: 0, height: '3em', }}>\n                                    {item.blocks.map((block) => <div\n                                        style={{\n                                            position: 'absolute',\n                                            left: block.start * BAR_LEN_FACTOR,\n                                            width: block.length * BAR_LEN_FACTOR,\n                                            height: '3em',\n                                            backgroundColor: block.color\n                                        }}>\n                                    </div>)}\n                                </List.Item>\n                            )}\n                        />\n                        <div className=\"timeline-indicator-bar\" style={{ left: this.props.stepValue * BAR_LEN_FACTOR }} />\n                    </Col>\n                </Row>\n            </Col>\n        );\n    }\n}\n\nexport default TimelineEditor;\n","import { DownOutlined, ProjectOutlined } from \"@ant-design/icons\";\nimport { Card, Tree } from \"antd\";\nimport React from \"react\";\n\ninterface SharedVariableCardState {\n    sharedValues: VariableTreeType[];\n}\n\ninterface SharedVariableCardProps {\n    sharedVariables: Record<string, unknown>;\n}\n\nexport type VariableTreeType = {\n    title: string;\n    key: string;\n    children: VariableTreeType[];\n}\n\nclass SharedVariableCard extends React.Component<SharedVariableCardProps, SharedVariableCardState> {\n    constructor(props: SharedVariableCardProps) {\n        super(props);\n\n        let treeify = (obj: any) => Object.entries(obj).map(([k, v]) => {\n            let convertedTree: VariableTreeType;\n            if (v == null || typeof v !== 'object') {\n                convertedTree = {\n                    title: `${k}: ${this.formatVariableValue(v)}`,\n                    key: k,\n                    children: []\n                };\n            } else {\n                convertedTree = {\n                    title: k,\n                    key: k,\n                    children: treeify(v)\n                };\n            }\n            return convertedTree;\n        });\n        this.state = {\n            sharedValues: treeify(this.props.sharedVariables)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><ProjectOutlined /> Variables</>} className=\"variables-card\">\n                <Tree\n                    showIcon\n                    defaultExpandAll\n                    defaultSelectedKeys={['0-0-0']}\n                    switcherIcon={<DownOutlined />}\n                    treeData={this.state.sharedValues}\n                />\n            </Card>\n        );\n    }\n}\n\nexport default SharedVariableCard;\n","import { CheckCircleTwoTone, CheckSquareTwoTone, CloseCircleTwoTone, CloseSquareTwoTone, LoadingOutlined, MinusCircleTwoTone, PlayCircleTwoTone, QuestionCircleTwoTone, WarningTwoTone } from \"@ant-design/icons\";\nimport { Spin, Table, Tooltip } from \"antd\";\nimport React from \"react\";\nimport { CharmonySlice, CharmonyStackTrace } from \"../types/CharmonyJson\";\nimport './StackTraceTable.css'\n\ninterface StackTraceTableState {\n    processTableData: ProcessTableData[];\n}\n\ninterface StackTraceTableProps {\n    currentStackTrace: CharmonySlice;\n    threadNames: Record<string, string>\n}\n\nexport type ProcessTableData = {\n    process: {\n        name: string;\n        status: string;\n    };\n    stacktrace: string;\n    variables: string;\n}\n\nclass StackTraceTable extends React.Component<StackTraceTableProps, StackTraceTableState> {\n    constructor(props: StackTraceTableProps) {\n        super(props);\n\n        let showStackTraceVariables = (level: number, pid: string) => {\n            const stackTrace = this.props.currentStackTrace.idToStackTrace[pid];\n            const trace = stackTrace.callStack[level];\n            if (trace)\n                return Object.entries(trace.vars).map(([name, value]) => {\n                    return `${name} = ${this.formatVariableValue(value)}`;\n                }).join(\"\\n\");\n            else\n                return \"\";\n        }\n\n        let mapProcesses = (obj: Record<string, CharmonyStackTrace>) => Object.keys(obj).map((pid, rowNumber) => {\n            const traceData = obj[pid];\n            let convertedTree: ProcessTableData = {\n                process: {\n                    name: this.props.threadNames[pid],\n                    status: traceData.fullStatus\n                },\n                stacktrace: traceData.callStack.map((stack, level) => stack.method).join(\"\\n\"),\n                variables: showStackTraceVariables(0, pid)\n            }\n            return convertedTree;\n        });\n\n        this.state = {\n            processTableData: mapProcesses(this.props.currentStackTrace.idToStackTrace)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        const columns = [\n            {\n                title: 'Process',\n                dataIndex: 'process',\n                key: 'process',\n                render: (text: { name: string; status: string }) => {\n                    let statusRender = (status: string) => {\n                        switch (status) {\n                            case \"running\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"running atomic\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"running atomic read-only\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable atomic\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable atomic read-only\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"failed\":\n                                return <CloseSquareTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked atomic\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked atomic read-only\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"terminated\":\n                                return <CheckSquareTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"choosing\":\n                                return <QuestionCircleTwoTone twoToneColor=\"#d4b106\" />;\n                            default:\n                                console.log(status);\n                                return <WarningTwoTone />;\n                        }\n                    }\n\n                    return (<span>\n                        <Tooltip title={text.status}>{statusRender(text.status)}</Tooltip>  {text.name}\n                    </span>);\n                }\n            },\n            {\n                title: 'Stack Trace',\n                dataIndex: 'stacktrace',\n                key: 'stacktrace',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },\n            {\n                title: 'Variables',\n                dataIndex: 'variables',\n                key: 'variables',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },];\n        return (\n            <Table\n                className=\"stacktrace-table\"\n                style={{ whiteSpace: 'pre' }}\n                columns={columns}\n                dataSource={this.state.processTableData}\n                pagination={false} />\n        );\n    }\n}\n\nexport default StackTraceTable;\n","import { PageHeader } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport SplitPane from \"react-split-pane\";\nimport { CharmonySlice, CharmonyTopLevel, ExecutionPath } from \"../types/CharmonyJson\";\nimport './Timeline.css'\nimport AssemblyCard from \"./AssemblyCard\";\nimport TimelineEditor from \"./TimelineEditor\";\nimport React from \"react\";\nimport SharedVariableCard from \"./SharedVariableCard\";\nimport StackTraceTable from \"./StackTraceTable\";\n\ninterface TimelineProps {\n    harmonyData: CharmonyTopLevel & ExecutionPath;\n}\n\ninterface TimelineState {\n    stepValue: number;\n    currentPc: number;\n    currentSlice: CharmonySlice;\n}\n\nclass Timeline extends React.Component<TimelineProps, TimelineState> {\n    constructor(props: TimelineProps) {\n        super(props);\n        let currentStep = this.props.harmonyData.microSteps[0];\n        let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n        this.state = {\n            stepValue: 0,\n            currentPc: 0,\n            currentSlice: currentSlice\n        }\n    }\n\n    setStepValue(value: number) {\n        let currentStep = this.props.harmonyData.microSteps[value];\n        if (currentStep) {\n            let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n            this.setState({\n                stepValue: value,\n                currentPc: currentStep.pc,\n                currentSlice: currentSlice\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Layout className=\"fullscreen\" >\n                <Content className=\"fullscreen\">\n                    <SplitPane split=\"horizontal\" minSize={300} defaultSize={\"70%\"}>\n                        <SplitPane split=\"vertical\" minSize={100} defaultSize={300}>\n                            <div>\n                                <PageHeader\n                                    className=\"issue-header\"\n                                    title={<><ExclamationCircleOutlined />&nbsp;&nbsp;{this.props.harmonyData.issue}</>}\n                                />\n                                <SplitPane split=\"horizontal\" minSize={200} defaultSize={\"60%\"}>\n                                    <AssemblyCard code={this.props.harmonyData.executedCode} pcValue={this.state.currentPc} />\n                                    <SharedVariableCard\n                                        key={JSON.stringify(this.state.currentSlice.sharedValues)}\n                                        sharedVariables={this.state.currentSlice.sharedValues} />\n                                </SplitPane>\n                            </div>\n                            <StackTraceTable\n                                key={JSON.stringify(this.state.currentSlice)}\n                                currentStackTrace={this.state.currentSlice}\n                                threadNames={this.props.harmonyData.idToThreadName} />\n                        </SplitPane>\n                        <TimelineEditor\n                            stepValue={this.state.stepValue}\n                            setStepValue={(v) => this.setStepValue(v)}\n                            blocks={this.props.harmonyData.macroSteps}\n                            slices={this.props.harmonyData.slices} />\n                    </SplitPane>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nexport default Timeline;\n","import React, { useState } from 'react';\nimport './App.css';\nimport LoadingScreen from './loading/LoadingScreen';\nimport Timeline from './timeline/Timeline';\n\nfunction App() {\n  const [harmonyData, setHarmonyData] = useState(undefined);\n  const [harmonyGV, setHarmonyGV] = useState(undefined);\n  const [harmonyMsg, setHarmonyMsg] = useState(undefined);\n  const [isFadingOut, setIsFadingOut] = useState(false);\n\n  // Retrieves the data from our panel\n  React.useEffect(() => {\n    const handler = (event: MessageEvent<any>) => {\n      const { command, jsonData } = event.data; // The command and JSON data our extension sent\n      switch (command) {\n        case 'load':\n          setIsFadingOut(true);\n          setTimeout(() => setIsFadingOut(false), 200);\n          setHarmonyData(jsonData);\n          break;\n        case 'load-graph':\n            setHarmonyGV(jsonData);\n          break;\n        case 'message':\n          setHarmonyMsg(jsonData);\n          break;\n        case 'start':\n          break;\n      }\n    }\n\n    window.addEventListener(\"message\", handler);\n\n    // eslint-disable-next-line no-restricted-globals\n    parent.window.postMessage({ command: \"iframeReady\", data: null }, \"*\");\n\n    // clean up\n    return () => window.removeEventListener(\"message\", handler)\n  }, []);\n\n  return (\n    <div className={isFadingOut ? \"main-fadeout\" : \"main-fadein\"}>\n      {(harmonyData && !isFadingOut)\n        ? <Timeline harmonyData={harmonyData} />\n        : <LoadingScreen displayStr={harmonyMsg} harmonyGV={harmonyGV} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}