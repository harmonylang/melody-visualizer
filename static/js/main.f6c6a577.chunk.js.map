{"version":3,"sources":["logo.svg","loading/LoadingScreen.tsx","timeline/AssemblyCard.tsx","timeline/TimelineEditor.tsx","timeline/SharedVariableCard.tsx","timeline/StackTraceTable.tsx","timeline/Timeline.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingScreen","props","state","displayStr","loadingFun","src","HarmonyIcon","alt","width","height","className","this","Math","floor","random","length","xmlns","xmlnsXlink","viewBox","preserveAspectRatio","id","d","xlinkHref","x","y","fill","React","Component","AssemblyCard","listRefs","code","reduce","acc","value","set","initialPc","createRef","Map","highlightRef","nextProps","_","scrollToValue","pcValue","get","current","scrollIntoView","behavior","block","style","top","size","title","BugOutlined","dataSource","renderItem","item","assembly","map","c","idx","pc","Item","ref","sourceCode","disabled","type","file","substring","lastIndexOf","replace","line","position","zIndex","backgroundColor","COLOR_MAP","TimelineEditor","interval","processBarsRef","totalDuration","processObjects","processLabels","processBars","blocks","forEach","mas","tid","name","startSliceIdx","lastSliceIdx","has","push","processBar","i","s","slices","start","duration","color","processNum","onClickTimeline","bind","playing","oldValue","stepValue","scrollTo","left","setStepValue","setState","e","preventDefault","targetElement","currentTarget","rect","getBoundingClientRect","round","clientX","scrollLeft","setInterval","tick","clearInterval","shape","icon","StepBackwardOutlined","onClick","stepBackwards","PauseOutlined","CaretRightOutlined","togglePlaying","StepForwardOutlined","stepForwards","onChange","v","flexGrow","max","span","bordered","overflowX","onMouseDown","padding","SharedVariableCard","sharedValues","treeify","obj","Object","entries","k","formatVariableValue","key","children","sharedVariables","typeofV","startsWith","toString","toUpperCase","JSON","stringify","ProjectOutlined","showIcon","defaultExpandAll","defaultSelectedKeys","switcherIcon","DownOutlined","treeData","StackTraceTable","showStackTraceVariables","level","pid","trace","currentStackTrace","idToStackTrace","callStack","vars","join","processTableData","keys","rowNumber","traceData","process","threadNames","status","fullStatus","stacktrace","stack","method","variables","columns","dataIndex","render","text","PlayCircleTwoTone","twoToneColor","CheckCircleTwoTone","CloseSquareTwoTone","MinusCircleTwoTone","CheckSquareTwoTone","QuestionCircleTwoTone","console","log","WarningTwoTone","statusRender","whiteSpace","pagination","Timeline","currentStep","harmonyData","microSteps","currentSlice","sliceIdx","currentPc","split","minSize","defaultSize","ExclamationCircleOutlined","issue","executedCode","idToThreadName","macroSteps","App","useState","undefined","setHarmonyData","harmonyMsg","setHarmonyMsg","isFadingOut","setIsFadingOut","useEffect","handler","event","data","command","jsonData","setTimeout","window","addEventListener","parent","postMessage","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6c6a577.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.da5a3132.svg\";","import React from \"react\";\nimport './LoadingScreen.css'\nimport HarmonyIcon from '../logo.svg'\n\ninterface LoadingScreenState {\n    displayStr?: string;\n}\n\ninterface LoadingScreenProps {\n    displayStr?: string;\n}\n\nclass LoadingScreen extends React.Component<LoadingScreenProps, LoadingScreenState> {\n    constructor(props: LoadingScreenProps) {\n        super(props);\n\n        this.state = {\n            displayStr: this.props.displayStr\n        }\n    }\n\n    render() {\n        const loadingFun = [\n            \"Strumming threads...\",\n            \"Simulating parallel universes...\",\n            \"Revising the halting problem...\",\n            \"Adding the 51st state...\",\n            \"Testing for the delta invariant...\"\n        ];\n        return (<>\n            <img src={HarmonyIcon} alt=\"Harmony Logo\" width={128} height={128} className=\"harmony-icon\" />\n            <h2 className=\"harmony-icon-subtitle\">{this.state.displayStr ?? loadingFun[Math.floor(Math.random()*loadingFun.length)]}</h2>\n            <svg className=\"hero-waves\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 24 150 28 \" preserveAspectRatio=\"none\">\n                <defs>\n                    <path id=\"wave-path\" d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\" />\n                </defs>\n                <g className=\"wave1\">\n                    <use xlinkHref=\"#wave-path\" x=\"50\" y=\"2\" fill=\"rgba(255,255,255, .1)\" />\n                </g>\n                <g className=\"wave2\">\n                    <use xlinkHref=\"#wave-path\" x=\"50\" y=\"0\" fill=\"rgba(255,255,255, .2)\" />\n                </g>\n                <g className=\"wave3\">\n                    <use xlinkHref=\"#wave-path\" x=\"50\" y=\"8\" fill=\"#fff\" />\n                </g>\n            </svg>\n            <div className=\"hero-bottom-bar\" />\n            </>\n        );\n    }\n}\n\nexport default LoadingScreen;\n","import { BugOutlined } from \"@ant-design/icons\";\nimport { Card, List, Tooltip } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport React from \"react\";\nimport { CharmonyExecutedCode } from \"../types/CharmonyJson\";\nimport './AssemblyCard.css'\n\ninterface AssemblyCardState {\n    listRefs: Map<number, React.RefObject<any>>;\n    highlightRef: React.RefObject<any>;\n}\n\ninterface AssemblyCardProps {\n    pcValue: number;\n    code: CharmonyExecutedCode[];\n}\n\nclass AssemblyCard extends React.Component<AssemblyCardProps, AssemblyCardState> {\n    constructor(props: AssemblyCardProps) {\n        super(props);\n\n        this.state = {\n            listRefs: this.props.code.reduce((acc, value) => {\n                acc.set(value.initialPc, React.createRef());\n                return acc;\n            }, new Map()),\n            highlightRef: React.createRef()\n        }\n    }\n\n    shouldComponentUpdate(nextProps: AssemblyCardProps, _: any) {\n        this.scrollToValue(nextProps.pcValue);\n        return this.props.code !== nextProps.code;\n    }\n\n    scrollToValue(pcValue: number) {\n        this.state.listRefs.get(pcValue)?.current.scrollIntoView({\n            behavior: 'auto',\n            block: 'start',\n        });\n        this.state.highlightRef.current.style.top = (pcValue * 25) + \"px\";\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><BugOutlined /> Assembly</>} className=\"assembly-card\">\n                <List\n                    size=\"small\"\n                    className=\"card-list\"\n                    dataSource={this.props.code}\n                    renderItem={item => <>\n                        {item.assembly.map((c, idx) => {\n                            const pc = idx + item.initialPc;\n                            return <List.Item className=\"assembly-list-item\" key={pc}>\n                                <div ref={this.state.listRefs.get(pc)}>\n                                <Tooltip\n                                    title={item.sourceCode}>\n                                    <Text disabled>{pc}</Text>&nbsp;\n                                    {c.assembly}\n                                    <Text type=\"warning\" className=\"assembly-list-text\">\n                                        {item.file.substring(item.file.lastIndexOf('/') + 1).replace(\".hny\", \"\")}:{item.line}\n                                    </Text>\n                                </Tooltip>\n                                </div>\n                            </List.Item>\n                        })}\n                    </>}\n                />\n                <div ref={this.state.highlightRef} style={{ position: \"absolute\", top: 0, width: \"100%\", height: 25, zIndex: 8, backgroundColor: \"#ffffff20\"}}></div>\n            </Card>\n        );\n    }\n}\n\nexport default AssemblyCard;\n","import { CaretRightOutlined, PauseOutlined, StepBackwardOutlined, StepForwardOutlined } from \"@ant-design/icons\";\nimport { Button, Col, List, Row, Slider } from \"antd\";\nimport React from \"react\";\nimport { CharmonyMacroStep, CharmonySlice } from \"../types/CharmonyJson\";\nimport \"./TimelineEditor.css\"\n\nconst BAR_LEN_FACTOR = 5;\nconst COLOR_MAP = ['#c62828', '#AD1457', '#6A1B9A', '#4527A0', '#283593', '#1565C0', '#0277BD', '#00838F',\n    '#00695C', '#2E7D32', '#558B2F', '#9E9D24', '#F9A825', '#FF8F00', '#EF6C00', '#D84315', '#4E342E',\n    '#424242', '#37474F'\n];\n\ninterface TimelineEditorProps {\n    stepValue: number;\n    setStepValue: (v: number) => void;\n    blocks: CharmonyMacroStep[];\n    slices: CharmonySlice[];\n}\n\ninterface TimelineEditorState {\n    playing: boolean;\n    totalDuration: number;\n    processLabels: String[];\n    processBars: ProcessBar[];\n}\n\ninterface ProcessBlock {\n    start: number;\n    length: number;\n    color: string;\n}\n\ninterface ProcessBar {\n    blocks: ProcessBlock[];\n}\n\nclass TimelineEditor extends React.Component<TimelineEditorProps, TimelineEditorState> {\n    interval: NodeJS.Timeout | undefined;\n    processBarsRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: TimelineEditorProps) {\n        super(props);\n\n        let totalDuration = 0;\n        let processObjects = new Map<string, ProcessBar>();\n        let processLabels: String[] = [];\n        let processBars: ProcessBar[] = [];\n\n        props.blocks?.forEach((mas) => {\n            const { tid, name, startSliceIdx, lastSliceIdx } = mas;\n            if (!processObjects.has(tid)) {\n                // Label Generation\n                processLabels.push(name);\n\n                // Row Generation\n                processObjects.set(tid, { blocks: [] });\n            }\n\n            const processBar = processObjects.get(tid);\n\n            for (let i = startSliceIdx; i < lastSliceIdx; i++) {\n                const s = props.slices[i];\n                processBar?.blocks.push({ start: totalDuration, length: s.duration, color: \"\" });\n                totalDuration += s.duration;\n            }\n        });\n\n        let processNum = 0;\n        processObjects.forEach((processBar) => {\n            processBar.blocks.forEach((block) => block.color = COLOR_MAP[processNum % COLOR_MAP.length]);\n            processBars.push(processBar);\n            processNum++;\n        });\n\n        this.processBarsRef = React.createRef();\n        this.onClickTimeline = this.onClickTimeline.bind(this);\n\n        this.state = {\n            playing: false,\n            totalDuration: totalDuration,\n            processLabels: processLabels,\n            processBars: processBars\n        }\n    }\n\n    tick() {\n        let oldValue = this.props.stepValue;\n        if (this.state.playing) {\n            if (oldValue + 1 < this.state.totalDuration) {\n                this.processBarsRef.current?.scrollTo({\n                    top: 0,\n                    left: (oldValue + 1) * BAR_LEN_FACTOR,\n                    behavior: 'auto'\n                });\n                this.setStepValue(oldValue + 1);\n            } else {\n                this.setState({ playing: false });\n            }\n        }\n\n    }\n\n    stepForwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue < this.state.totalDuration)\n            this.setStepValue(oldValue + 1);\n    }\n\n    stepBackwards() {\n        let oldValue = this.props.stepValue;\n        if (oldValue > 0)\n            this.setStepValue(oldValue - 1);\n    }\n\n    togglePlaying() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    setStepValue(value: number){\n        this.props.setStepValue(value);\n    }\n\n    onClickTimeline(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        e.preventDefault();\n        let targetElement = (e.currentTarget as HTMLElement)\n        let rect = targetElement.getBoundingClientRect();\n        this.setStepValue(Math.round((e.clientX - rect.left + targetElement.scrollLeft) / BAR_LEN_FACTOR));\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount() {\n        if (this.interval)\n            clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <Col className=\"timeline-card\">\n                <Row className=\"timeline-bar\">\n                    <Button shape=\"circle\"\n                        icon={<StepBackwardOutlined />}\n                        size=\"middle\" className=\"timeline-bar-btn\"\n                        onClick={() => this.stepBackwards()} />\n                    <Button shape=\"circle\"\n                        icon={this.state.playing ? <PauseOutlined /> : <CaretRightOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.togglePlaying()} />\n                    <Button shape=\"circle\"\n                        icon={<StepForwardOutlined />}\n                        size=\"middle\"\n                        className=\"timeline-bar-btn\"\n                        onClick={() => this.stepForwards()} />\n                    <Slider onChange={(v) => this.setStepValue(v)} value={this.props.stepValue} style={{ flexGrow: 1 }} max={this.state.totalDuration} className=\"timeline-slider\" />\n                </Row>\n                <Row className=\"timeline-holder\">\n                    <Col span={6}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processLabels}\n                            renderItem={item => (\n                                <List.Item className=\"timeline-process-title\">\n                                    {item}\n                                </List.Item>\n                            )}\n                        />\n                    </Col>\n                    <Col span={18} ref={this.processBarsRef} style={{ overflowX: 'scroll' }} onMouseDown={this.onClickTimeline}>\n                        <List\n                            bordered={false}\n                            dataSource={this.state.processBars}\n                            style={{ width: this.state.totalDuration * BAR_LEN_FACTOR }}\n                            renderItem={item => (\n                                <List.Item style={{ position: 'relative', padding: 0, height: '3em', }}>\n                                    {item.blocks.map((block) => <div\n                                        style={{\n                                            position: 'absolute',\n                                            left: block.start * BAR_LEN_FACTOR,\n                                            width: block.length * BAR_LEN_FACTOR,\n                                            height: '3em',\n                                            backgroundColor: block.color\n                                        }}>\n                                    </div>)}\n                                </List.Item>\n                            )}\n                        />\n                        <div className=\"timeline-indicator-bar\" style={{ left: this.props.stepValue * BAR_LEN_FACTOR }} />\n                    </Col>\n                </Row>\n            </Col>\n        );\n    }\n}\n\nexport default TimelineEditor;\n","import { DownOutlined, ProjectOutlined } from \"@ant-design/icons\";\nimport { Card, Tree } from \"antd\";\nimport React from \"react\";\n\ninterface SharedVariableCardState {\n    sharedValues: VariableTreeType[];\n}\n\ninterface SharedVariableCardProps {\n    sharedVariables: Record<string, unknown>;\n}\n\nexport type VariableTreeType = {\n    title: string;\n    key: string;\n    children: VariableTreeType[];\n}\n\nclass SharedVariableCard extends React.Component<SharedVariableCardProps, SharedVariableCardState> {\n    constructor(props: SharedVariableCardProps) {\n        super(props);\n\n        let treeify = (obj: any) => Object.entries(obj).map(([k, v]) => {\n            let convertedTree: VariableTreeType;\n            if (v == null || typeof v !== 'object') {\n                convertedTree = {\n                    title: `${k}: ${this.formatVariableValue(v)}`,\n                    key: k,\n                    children: []\n                };\n            } else {\n                convertedTree = {\n                    title: k,\n                    key: k,\n                    children: treeify(v)\n                };\n            }\n            return convertedTree;\n        });\n        this.state = {\n            sharedValues: treeify(this.props.sharedVariables)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        return (\n            <Card size=\"small\" title={<><ProjectOutlined /> Variables</>} className=\"variables-card\">\n                <Tree\n                    showIcon\n                    defaultExpandAll\n                    defaultSelectedKeys={['0-0-0']}\n                    switcherIcon={<DownOutlined />}\n                    treeData={this.state.sharedValues}\n                />\n            </Card>\n        );\n    }\n}\n\nexport default SharedVariableCard;\n","import { CheckCircleTwoTone, CheckSquareTwoTone, CloseCircleTwoTone, CloseSquareTwoTone, LoadingOutlined, MinusCircleTwoTone, PlayCircleTwoTone, QuestionCircleTwoTone, WarningTwoTone } from \"@ant-design/icons\";\nimport { Spin, Table, Tooltip } from \"antd\";\nimport React from \"react\";\nimport { CharmonySlice, CharmonyStackTrace } from \"../types/CharmonyJson\";\nimport './StackTraceTable.css'\n\ninterface StackTraceTableState {\n    processTableData: ProcessTableData[];\n}\n\ninterface StackTraceTableProps {\n    currentStackTrace: CharmonySlice;\n    threadNames: Record<string, string>\n}\n\nexport type ProcessTableData = {\n    process: {\n        name: string;\n        status: string;\n    };\n    stacktrace: string;\n    variables: string;\n}\n\nclass StackTraceTable extends React.Component<StackTraceTableProps, StackTraceTableState> {\n    constructor(props: StackTraceTableProps) {\n        super(props);\n\n        let showStackTraceVariables = (level: number, pid: string) => {\n            const stackTrace = this.props.currentStackTrace.idToStackTrace[pid];\n            const trace = stackTrace.callStack[level];\n            if (trace)\n                return Object.entries(trace.vars).map(([name, value]) => {\n                    return `${name} = ${this.formatVariableValue(value)}`;\n                }).join(\"\\n\");\n            else\n                return \"\";\n        }\n\n        let mapProcesses = (obj: Record<string, CharmonyStackTrace>) => Object.keys(obj).map((pid, rowNumber) => {\n            const traceData = obj[pid];\n            let convertedTree: ProcessTableData = {\n                process: {\n                    name: this.props.threadNames[pid],\n                    status: traceData.fullStatus\n                },\n                stacktrace: traceData.callStack.map((stack, level) => stack.method).join(\"\\n\"),\n                variables: showStackTraceVariables(0, pid)\n            }\n            return convertedTree;\n        });\n\n        this.state = {\n            processTableData: mapProcesses(this.props.currentStackTrace.idToStackTrace)\n        };\n    }\n\n    formatVariableValue(v: any) {\n        const typeofV = typeof v;\n        if (typeofV === \"string\") {\n            if (v.startsWith(\"?\")) {\n                return `${v}`;\n            } else {\n                return `\"${v}\"`;\n            }\n        }\n        if (typeofV === \"boolean\" || typeofV === \"number\") {\n            const s = v.toString()\n            return s[0].toUpperCase() + s.substring(1);\n        }\n        if (v == null) {\n            return 'None';\n        } else {\n            return JSON.stringify(v);\n        }\n    }\n\n    render() {\n        const columns = [\n            {\n                title: 'Process',\n                dataIndex: 'process',\n                key: 'process',\n                render: (text: { name: string; status: string }) => {\n                    let statusRender = (status: string) => {\n                        switch (status) {\n                            case \"running\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"running atomic\":\n                                return <PlayCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"runnable atomic\":\n                                return <CheckCircleTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"failed\":\n                                return <CloseSquareTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"blocked atomic\":\n                                return <MinusCircleTwoTone twoToneColor=\"#a8071a\" />;\n                            case \"terminated\":\n                                return <CheckSquareTwoTone twoToneColor=\"#7cb305\" />;\n                            case \"choosing\":\n                                return <QuestionCircleTwoTone twoToneColor=\"#d4b106\" />;\n                            default:\n                                console.log(status);\n                                return <WarningTwoTone />;\n                        }\n                    }\n\n                    return (<span>\n                        <Tooltip title={text.status}>{statusRender(text.status)}</Tooltip>  {text.name}\n                    </span>);\n                }\n            },\n            {\n                title: 'Stack Trace',\n                dataIndex: 'stacktrace',\n                key: 'stacktrace',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },\n            {\n                title: 'Variables',\n                dataIndex: 'variables',\n                key: 'variables',\n                render: (text: string) => (\n                    <span>\n                        {text}\n                    </span>\n                )\n            },];\n        return (\n            <Table\n                className=\"stacktrace-table\"\n                style={{ whiteSpace: 'pre' }}\n                columns={columns}\n                dataSource={this.state.processTableData}\n                pagination={false} />\n        );\n    }\n}\n\nexport default StackTraceTable;\n","import { PageHeader } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport SplitPane from \"react-split-pane\";\nimport { CharmonySlice, CharmonyTopLevel, ExecutionPath } from \"../types/CharmonyJson\";\nimport './Timeline.css'\nimport AssemblyCard from \"./AssemblyCard\";\nimport TimelineEditor from \"./TimelineEditor\";\nimport React from \"react\";\nimport SharedVariableCard from \"./SharedVariableCard\";\nimport StackTraceTable from \"./StackTraceTable\";\n\ninterface TimelineProps {\n    harmonyData: CharmonyTopLevel & ExecutionPath;\n}\n\ninterface TimelineState {\n    stepValue: number;\n    currentPc: number;\n    currentSlice: CharmonySlice;\n}\n\nclass Timeline extends React.Component<TimelineProps, TimelineState> {\n    constructor(props: TimelineProps) {\n        super(props);\n        let currentStep = this.props.harmonyData.microSteps[0];\n        let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n        this.state = {\n            stepValue: 0,\n            currentPc: 0,\n            currentSlice: currentSlice\n        }\n    }\n\n    setStepValue(value: number) {\n        let currentStep = this.props.harmonyData.microSteps[value];\n        if (currentStep) {\n            let currentSlice = this.props.harmonyData.slices[currentStep.sliceIdx];\n\n            this.setState({\n                stepValue: value,\n                currentPc: currentStep.pc,\n                currentSlice: currentSlice\n            });\n        }\n    }\n\n    render() {\n        return (\n            <Layout className=\"fullscreen\" >\n                <Content className=\"fullscreen\">\n                    <SplitPane split=\"horizontal\" minSize={300} defaultSize={570}>\n                        <SplitPane split=\"vertical\" minSize={100} defaultSize={300}>\n                            <div>\n                                <PageHeader\n                                    className=\"issue-header\"\n                                    title={<><ExclamationCircleOutlined />&nbsp;&nbsp;{this.props.harmonyData.issue}</>}\n                                />\n                                <SplitPane split=\"horizontal\" minSize={200} defaultSize={300}>\n                                    <AssemblyCard code={this.props.harmonyData.executedCode} pcValue={this.state.currentPc} />\n                                    <SharedVariableCard\n                                        key={JSON.stringify(this.state.currentSlice.sharedValues)}\n                                        sharedVariables={this.state.currentSlice.sharedValues} />\n                                </SplitPane>\n                            </div>\n                            <StackTraceTable\n                                key={JSON.stringify(this.state.currentSlice)}\n                                currentStackTrace={this.state.currentSlice}\n                                threadNames={this.props.harmonyData.idToThreadName} />\n                        </SplitPane>\n                        <TimelineEditor\n                            stepValue={this.state.stepValue}\n                            setStepValue={(v) => this.setStepValue(v)}\n                            blocks={this.props.harmonyData.macroSteps}\n                            slices={this.props.harmonyData.slices} />\n                    </SplitPane>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nexport default Timeline;\n","import React, { useState } from 'react';\nimport './App.css';\nimport LoadingScreen from './loading/LoadingScreen';\nimport Timeline from './timeline/Timeline';\n\nfunction App() {\n  const [harmonyData, setHarmonyData] = useState(undefined);\n  const [harmonyMsg, setHarmonyMsg] = useState(undefined);\n  const [isFadingOut, setIsFadingOut] = useState(false);\n\n  // Retrieves the data from our panel\n  React.useEffect(() => {\n    const handler = (event: MessageEvent<any>) => {\n      const { command, jsonData } = event.data; // The command and JSON data our extension sent\n      switch (command) {\n        case 'load':\n          setIsFadingOut(true);\n          setTimeout(() => setIsFadingOut(false), 200);\n          setHarmonyData(jsonData);\n          break;\n        case 'message':\n          setHarmonyMsg(jsonData);\n          break;\n        case 'start':\n          break;\n      }\n    }\n\n    window.addEventListener(\"message\", handler);\n\n    // eslint-disable-next-line no-restricted-globals\n    parent.window.postMessage({ command: \"iframeReady\", data: null }, \"*\");\n\n    // clean up\n    return () => window.removeEventListener(\"message\", handler)\n  }, []);\n\n  return (\n    <div className={isFadingOut ? \"main-fadeout\" : \"main-fadein\"}>\n      {(harmonyData && !isFadingOut)\n        ? <Timeline harmonyData={harmonyData} />\n        : <LoadingScreen key={harmonyMsg} displayStr={harmonyMsg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}